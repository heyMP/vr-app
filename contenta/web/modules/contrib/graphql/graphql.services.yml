parameters:
  graphql.config:
    # GraphQL result cache:
    #
    # By default, the GraphQL results get cached. This can be disabled during development.
    #
    # @default true
    result_cache: true

    # GraphQL schema cache:
    #
    # By default, the GraphQL schema gets cached. This can be disabled during development.
    #
    # @default true
    schema_cache: true

    # Development mode:
    #
    # Disables field security. All fields can be resolved without restrictions.
    #
    # @default false
    development: false

services:
  # Logger channel for graphql related log entries.
  logger.channel.graphql:
    parent: logger.channel_base
    arguments: ['graphql']

  # Check access for executing graphql queries.
  access_check.graphql.query:
    class: Drupal\graphql\Access\QueryAccessCheck
    arguments: ['@request_stack']
    tags:
      - { name: access_check, applies_to: _graphql_query_access }

  # Schema and schema metadata cache bin.
  cache.graphql_schema:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [graphql_schema]
  cache.graphql_schema_metadata:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [graphql_schema_metadata]

  # Response and response metadata cache bin.
  cache.graphql_response:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [graphql_response]
  cache.graphql_response_metadata:
    class: Drupal\Core\Cache\CacheBackendInterface
    tags:
      - { name: cache.bin }
    factory: cache_factory:get
    arguments: [graphql_response_metadata]

  # Cache context for graphql request parameters.
  cache_context.gql:
    class: Drupal\graphql\Cache\Context\QueryCacheContext
    arguments: ['@request_stack']
    tags:
      - { name: cache.context }

  # Schema and processor factory.
  graphql.query_processor:
    class: Drupal\graphql\GraphQL\Execution\QueryProcessor
    arguments:
      - '@service_container'
      - '@graphql.schema_loader'
      - '@current_user'
      - '%graphql.config%'

  graphql.schema_loader:
    class: Drupal\graphql\GraphQL\Schema\SchemaLoader
    arguments:
      - '@cache_contexts_manager'
      - '@request_stack'
      - '@plugin.manager.graphql.schema'
      - '@cache.graphql_schema'
      - '@cache.graphql_schema_metadata'
      - '%graphql.config%'

  # Query map provider using the composite pattern.
  graphql.query_provider:
    class: Drupal\graphql\QueryProvider\QueryProvider
    tags:
        - { name: service_collector, tag: graphql_query_provider, call: addQueryProvider }
  graphql.query_provider.query_map.entity:
    class: Drupal\graphql\QueryProvider\EntityQueryMapQueryProvider
    arguments: ['@entity_type.manager']
    tags:
        - { name: graphql_query_provider }
  graphql.query_provider.query_map.json:
    class: Drupal\graphql\QueryProvider\JsonQueryMapQueryProvider
    arguments: ['@cache.default', '@config.factory']
    tags:
        - { name: graphql_query_provider }

  # Service for graphql request caching.
  graphql.cache_subscriber:
    class: Drupal\graphql\EventSubscriber\CacheSubscriber
    arguments:
      - '@graphql.request_policy'
      - '@graphql.response_policy'
      - '@current_route_match'
      - '@request_stack'
      - '@cache.graphql_response'
      - '@cache.graphql_response_metadata'
      - '@cache_contexts_manager'
      - '@graphql.schema_loader'
      - '%graphql.config%'
    tags:
      - { name: event_subscriber }

  graphql.query_routes:
    class: Drupal\graphql\Routing\QueryRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }

  # Cache request and response policies for graphql requests.
  graphql.request_policy:
    class: Drupal\Core\PageCache\ChainRequestPolicy
    tags:
      - { name: service_collector, tag: graphql_request_policy, call: addPolicy }
  graphql.response_policy:
    class: Drupal\Core\PageCache\ChainResponsePolicy
    tags:
      - { name: service_collector, tag: graphql_response_policy, call: addPolicy }
    lazy: true
  graphql.request_policy.allow_no_session_open:
    class: Drupal\Core\PageCache\RequestPolicy\NoSessionOpen
    arguments: ['@session_configuration']
    tags:
      - { name: graphql_request_policy }
  graphql.request_policy.deny_command_line:
    class: Drupal\graphql\Cache\RequestPolicy\DenyCommandLine
    tags:
      - { name: graphql_request_policy }
  graphql.request_policy.deny_unsafe_method_unless_query:
    class: Drupal\graphql\Cache\RequestPolicy\DenyUnsafeMethodUnlessQuery
    arguments: ['@path_processor_manager']
    tags:
      - { name: graphql_request_policy }

  # Upcasting for graphql query request parameters.
  graphql.route_enhancer.query:
    class: Drupal\graphql\Routing\QueryRouteEnhancer
    arguments: ['@graphql.query_provider']
    tags:
      - { name: route_enhancer }

  # Schema introspection service.
  graphql.introspection:
    class: Drupal\graphql\GraphQL\Utility\Introspection
    arguments: ['@graphql.query_processor']

  # Support for subrequests.
  graphql.subrequest_subscriber:
    class: Drupal\graphql\EventSubscriber\SubrequestSubscriber
    tags:
      - { name: event_subscriber }
  graphql.context_repository:
    class: Drupal\graphql\GraphQL\Context\ContextRepository
    tags:
      - { name: service_collector, tag: context_provider, call: addContextProvider }

  # Support for deferred / batched field resolvers.
  graphql.batched_resolver:
    class: Drupal\graphql\GraphQL\Batching\BatchedFieldResolver

  # Plugin manager for schemas
  plugin.manager.graphql.schema:
    class: Drupal\graphql\Plugin\GraphQL\SchemaPluginManager
    arguments:
      - 'Plugin/GraphQL/Schemas'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Schemas\SchemaPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLSchema'
      - 'graphql_schemas'
      - '@service_container'

  # Schema builder service. Collects all registered type system plugin managers.
  graphql.plugin_manager_aggregator:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManagerAggregator
    tags:
      - { name: service_collector, tag: graphql_plugin_manager, call: addPluginManager }

  # Plugin manager implementations for schema types.
  plugin.manager.graphql.union:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/UnionTypes'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Unions\UnionTypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLUnionType'
      - 'graphql_union_types'
      - '@logger.channel.graphql'
  plugin.manager.graphql.interface:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Interfaces'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Interfaces\InterfacePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLInterface'
      - 'graphql_interfaces'
      - '@logger.channel.graphql'
  plugin.manager.graphql.type:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Types'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLType'
      - 'graphql_types'
      - '@logger.channel.graphql'
  plugin.manager.graphql.input:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/InputTypes'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\InputTypes\InputTypePluginBase'
      - '\Drupal\graphql\Annotation\GraphQLInputType'
      - 'graphql_input_types'
      - '@logger.channel.graphql'
  plugin.manager.graphql.field:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Fields'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLField'
      - 'graphql_fields'
      - '@logger.channel.graphql'
  plugin.manager.graphql.mutation:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Mutations'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Mutations\MutationPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLMutation'
      - 'graphql_mutations'
      - '@logger.channel.graphql'
  plugin.manager.graphql.scalar:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Scalars'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Scalars\ScalarPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLScalar'
      - 'graphql_scalars'
      - '@logger.channel.graphql'
  plugin.manager.graphql.enum:
    class: Drupal\graphql\Plugin\GraphQL\TypeSystemPluginManager
    tags:
      - { name: graphql_plugin_manager }
    arguments:
      - 'Plugin/GraphQL/Enums'
      - '@container.namespaces'
      - '@module_handler'
      - '\Drupal\graphql\Plugin\GraphQL\Enums\EnumPluginBase'
      - '\Drupal\graphql\Annotation\GraphQLEnum'
      - 'graphql_enums'
      - '@logger.channel.graphql'

  # Voyager.
  graphql.voyager.page_display_variant_subscriber:
    class: Drupal\graphql\EventSubscriber\VoyagerPageDisplayVariantSubscriber
    tags:
      - { name: event_subscriber }
  graphql.voyager.routes:
    class: Drupal\graphql\Routing\VoyagerRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }

  # Explorer.
  graphql.graphiql.page_display_variant_subscriber:
    class: Drupal\graphql\EventSubscriber\ExplorerPageDisplayVariantSubscriber
    tags:
      - { name: event_subscriber }
  graphql.graphiql.explorer_routes:
    class: Drupal\graphql\Routing\ExplorerRoutes
    arguments: ['@plugin.manager.graphql.schema']
    tags:
      - { name: 'event_subscriber' }
