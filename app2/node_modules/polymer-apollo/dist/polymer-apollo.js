'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolymerApolloMixin = exports.DollarApollo = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-param-reassign, func-names, no-console */


var _lodash = require('lodash.omit');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.clone');

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DollarApollo = exports.DollarApollo = function () {
  function DollarApollo(el) {
    _classCallCheck(this, DollarApollo);

    this.el = el;
    this.subscriptions = {};
    this.queries = {};
    this._query = {};
    this._subscription = {};
    this.attached = false;
  }

  _createClass(DollarApollo, [{
    key: 'watchQuery',
    value: function watchQuery(options, key) {
      var observable = this.client.watchQuery(options);
      return this._processObservable(observable, key, 'query');
    }
  }, {
    key: 'subscribe',
    value: function subscribe(options, key) {
      var observable = this.client.subscribe(options);
      return this._processObservable(observable, key, 'subscription');
    }
  }, {
    key: '_processObservable',
    value: function _processObservable(observable, key, type) {
      var self = this;
      var _subscribe = observable.subscribe.bind(observable);
      observable.subscribe = function (opt) {
        var sub = _subscribe(opt);

        var _unsubscribe = sub.unsubscribe.bind(sub);
        sub.unsubscribe = function () {
          _unsubscribe();
          self['_' + type][key].sub = null;
        };
        self['_' + type][key].sub = sub;
        return sub;
      };
      return observable;
    }
  }, {
    key: '_getSubscribeCallbacks',
    value: function _getSubscribeCallbacks(key, type) {
      var el = this.el;
      var $apollo = this;
      var entry = this['_' + type][key];
      var loadingKey = entry.loadingKey;
      var loadingChangeCb = entry.watchLoading;
      this._changeLoader(loadingKey, true, loadingChangeCb);

      function nextResult(result) {
        $apollo._changeLoader(loadingKey, false, loadingChangeCb);
        $apollo._applyData(result.data);
        if (typeof entry.success === 'function') {
          entry.success.call(el, result);
        }
      }

      function catchError(error) {
        $apollo._changeLoader(loadingKey, false, loadingChangeCb);
        if (error.graphQLErrors && error.graphQLErrors.length !== 0) {
          console.error('GraphQL execution errors for ' + type + ' ' + key);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = error.graphQLErrors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var e = _step.value;

              console.error(e);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else if (error.networkError) {
          console.error('Error sending the ' + type + ' ' + key, error.networkError);
        } else {
          console.error(error);
        }
        if (typeof entry.error === 'function') {
          entry.error.call(el, error);
        }
      }

      return { next: nextResult, error: catchError };
    }
  }, {
    key: '_subscribeObservable',
    value: function _subscribeObservable(key, observable, type) {
      var opt = this._getSubscribeCallbacks(key, type);
      var sub = observable.subscribe(opt);
      return sub;
    }
  }, {
    key: '_applyData',
    value: function _applyData(data) {
      if (data) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Object.keys(data)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            this.el.set([key], data[key]);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }, {
    key: '_changeLoader',
    value: function _changeLoader(loadingKey, value, loadingChangeCb) {
      if (loadingKey) {
        this.el[loadingKey] = value;
      }

      if (loadingChangeCb) {
        loadingChangeCb(value);
      }
    }
  }, {
    key: '_refetch',
    value: function _refetch(key, entry) {
      var options = entry._options;
      var observable = entry.observable;
      var variables = options.variables;
      var opt = this._getSubscribeCallbacks(key, 'query');
      if (observable) {
        observable.refetch(variables, {
          forceFetch: !!options.forceFetch
        }).then(opt.next, opt.error);
      }
    }
  }, {
    key: 'refetch',
    value: function refetch(key) {
      var entry = this._query[key];
      if (entry) {
        this._refetch(key, entry);
      } else {
        console.error('Unable to find a query with key : ' + key);
      }
    }
  }, {
    key: '_generateApolloOptions',
    value: function _generateApolloOptions(options) {
      var apolloOptions = (0, _lodash2.default)(options, ['error', 'loadingKey', 'watchLoading', 'skip', '_options', 'options', 'result']);
      return apolloOptions;
    }
  }, {
    key: 'createApolloOptions',
    value: function createApolloOptions(apollo) {
      if (apollo) {
        var queries = (0, _lodash2.default)(apollo, ['subscribe', 'onReady']);
        this._query = queries || {};
        this._subscription = apollo.subscribe || {};
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = Object.keys(this._query)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;

            this._createOptionsProp(key, 'query');
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = Object.keys(this._subscription)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _key = _step4.value;

            this._createOptionsProp(_key, 'subscription');
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    }
  }, {
    key: '_createOptionsProp',
    value: function _createOptionsProp(key, type) {
      var options = this['_' + type][key].options;
      var rnd = Math.floor(1000000000 + Math.random() * 9000000000);
      var rId = '__apollo_' + rnd;
      this['_' + type][key]._key = rnd;
    }
  }, {
    key: 'init',
    value: function init(el) {
      this.el = el;
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = Object.keys(this._query)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var key = _step5.value;

          this._processOptions(key, 'query');
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = Object.keys(this._subscription)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _key2 = _step6.value;

          this._processOptions(_key2, 'subscription');
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  }, {
    key: 'start',
    value: function start(el) {
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = Object.keys(this._query)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var key = _step7.value;

          var entry = this._query[key];
          var options = entry._options || el[entry.options];
          this._polymerChange('query', key, options);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = Object.keys(this._subscription)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var _key3 = _step8.value;

          var _entry = this._subscription[_key3];
          var _options = _entry._options || el[_entry.options];
          this._polymerChange('subscription', _key3, _options);
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }
    }
  }, {
    key: '_processOptions',
    value: function _processOptions(key, type) {
      var entry = this['_' + type][key];
      var rId = '__apollo_' + entry._key;
      if (!this.el[rId + '_callback']) {
        if (typeof entry.options === 'string') {
          this._createPolymerObserver(rId, key, type);
        } else {
          entry._options = entry.options || { skip: false };
        }
        this['_' + type][key] = entry;
      }
    }
  }, {
    key: '_createPolymerObserver',
    value: function _createPolymerObserver(rId, key, type) {
      var $apollo = this;
      // unique id for observer callback
      var options = this['_' + type][key].options;
      if (typeof options === 'string') {
        var cbId = rId + '_callback';
        var propId = rId + '_prop';
        this.el[cbId] = function (opt) {
          $apollo._polymerChange(type, key, opt);
        };
        this.el._createComputedProperty(propId, options);
        this.el._createPropertyObserver(propId, cbId);
      }
    }
  }, {
    key: '_polymerChange',
    value: function _polymerChange(type, key) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (this.attached) {
        var entry = this['_' + type][key];
        entry._options = options;
        var _observable = entry.observable;
        var skip = !!options.skip;
        var _sub = entry.sub;
        if (skip) {
          if (_sub) {
            _sub.unsubscribe();
            delete entry.sub;
          }
        } else if (_sub) {
          _observable.setOptions(options);
        } else {
          var processArg = Object.assign({}, entry, options);

          var _ref = this[type + 'Process'](key, processArg),
              sub = _ref.sub,
              observable = _ref.observable;

          entry.sub = sub;
          entry.observable = observable;
        }
        this['_' + type][key] = entry;
      }
    }
  }, {
    key: 'queryProcess',
    value: function queryProcess(key, options) {
      if (key && options) {
        // Create observer
        var observable = this.watchQuery(this._generateApolloOptions(options), key);
        this.queries[key] = observable;
        options.observable = observable;
        // subscribe observable
        var sub = this._subscribeObservable(key, observable, 'query');
        return { sub: sub, observable: observable };
      }
      return null;
    }
  }, {
    key: 'subscriptionProcess',
    value: function subscriptionProcess(key, options) {
      if (key && options) {
        // Create observable
        var observable = this.subscribe(this._generateApolloOptions(options), key);
        this.subscriptions[key] = observable;
        options.observable = observable;
        this._subscription[key] = options;
        // subscribe observable
        var sub = this._subscribeObservable(key, observable, 'subscription');
        return { sub: sub, observable: observable };
      }
      return null;
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe(key, type) {
      var entry = this['_' + type][key];
      var sub = entry.sub;
      sub.unsubscribe();
      this['' + type][key] = (0, _lodash2.default)(entry, 'sub');
    }
  }, {
    key: 'client',
    get: function get() {
      return this.el._apolloClient;
    }
  }, {
    key: 'query',
    get: function get() {
      return this.client.query.bind(this.client);
    }
  }, {
    key: 'mutate',
    get: function get() {
      return this.client.mutate.bind(this.client);
    }
  }]);

  return DollarApollo;
}();

var PolymerApolloMixin = exports.PolymerApolloMixin = function PolymerApolloMixin(options, superclass) {
  return function (_superclass) {
    _inherits(_class, _superclass);

    function _class() {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));

      _this._apolloClient = options.apolloClient;
      _this.$apollo = new DollarApollo(_this);
      var apollo = _this.apollo;
      if (apollo) {
        _this.$apollo.createApolloOptions(apollo);
      }
      return _this;
    }

    _createClass(_class, [{
      key: 'connectedCallback',
      value: function connectedCallback() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'connectedCallback', this).call(this);
        var apollo = this.apollo;
        this.$apollo = (0, _lodash4.default)(this.$apollo);
        if (apollo) {
          this.$apollo.attached = true;
          this.$apollo.init(this);
        }
      }
    }, {
      key: 'ready',
      value: function ready() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'ready', this).call(this);
        var apollo = this.apollo;
        if (apollo) {
          this.$apollo.attached = true;
          this.$apollo.start(this);
        }
      }
    }, {
      key: 'disconnectedCallback',
      value: function disconnectedCallback() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'disconnectedCallback', this).call(this);
        var apollo = this.apollo;
        if (apollo && !this.apollo.onReady) {
          this.$apollo.attached = false;
          var $apollo = this.$apollo;
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = Object.keys($apollo._query)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var key = _step9.value;

              $apollo.unsubscribe(key, 'query');
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9.return) {
                _iterator9.return();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = Object.keys($apollo._subscription)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var _key4 = _step10.value;

              $apollo.unsubscribe(_key4, 'subscription');
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10.return) {
                _iterator10.return();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }
        }
      }
    }]);

    return _class;
  }(superclass);
};