{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Use to create a connection to your graphql-endpoint.\n\n### Usage\n\nInclude the build/apollo-client.js in your website for a default setup.\n\n```html\n<script src=\"bower_components/apollo-client/build/apollo-client.js\"></script>\n```\n\nCreate a single instance of the graphql-client.html\n\n```html\n<link rel=\"import\" href=\"apollo-client/graphql-client.html\" />\n<graphql-client config='{ \"uri\": \"https://graphql.endpoint/graphql\" }'></graphql-client>\n```\n\nThis will (by default) create an instance of Apollo Client with a [BatchedNetworkInterface](http://dev.apollodata.com/core/network.html#BatchingExample).\n\n### Custom Apollo Client\n\nYou can use your own apollo-client.js file, It should include:\n\n- `window.Apollo.client` an instance of ApolloClient\n- `window.Apollo.gql` an export of `graphql-tag`\n\nThe _only_ thing `<graphql-client>` exposes:\n\n```js\nwindow.Apollo.namedClient['default'] = apolloClientInstance;\n```\n\nFor an example how to set this up, take a look at apollo-client.js and at the webpack.config.js to see how to compile\nyour version.",
      "summary": "",
      "path": "graphql-client.html",
      "properties": [
        {
          "name": "config",
          "type": "Object",
          "description": "Will be passed to the createNetworkInterface.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 10
            },
            "end": {
              "line": 60,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "clientName",
          "type": "string",
          "description": "Name of the client, when using only a single endpoint in your application, you can omit this parameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/graphql-query-simple.html",
          "description": "Simple Query"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 53,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GraphqlClient",
      "attributes": [
        {
          "name": "config",
          "description": "Will be passed to the createNetworkInterface.",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 10
            },
            "end": {
              "line": 60,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "client-name",
          "description": "Name of the client, when using only a single endpoint in your application, you can omit this parameter.",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 67,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "graphql-client"
    },
    {
      "description": "# Graphql Query\n\nAn easy interface to create GraphQL queries in your system.\n\n## Building a query\n\n```html\n<link rel=\"import\" src=\"graphql-client.html\">\n```\n\n```html\n<graphql-query variables='{ \"identifier\": \"home_hero\" }' result=\"{{result}}\">\n  query ($identifier: String!) {\n    block: Block(identifier: $identifier) {\n      id\n      title\n      content\n    }\n  }\n</graphql-query>\n```\n\nThe __query__ you want to run becomes the body of the graphql-query element. you can provide additional variables as a\nJSON object.\n\nWhen the query resolves the resulting data will be placed in the result property.\n\n## Using the result:\n```html\n<h1>[[result.block.title]]</h1>\n<div class=\"content\">[[result.block.content]]</div>\n```\n\nChanging the variables or the query will automatically re-fetch all the information.\n\n## Detecting loading states\n\nThe query element implements the MatryoshkaLoaderMixin and thus propagates the loading state of the query throughout the system",
      "summary": "",
      "path": "graphql-query.html",
      "properties": [
        {
          "name": "query",
          "type": "Object",
          "description": "Copy of the query provided in this.innerText, if you want to programmatically change the query use\n`this.innerText`",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "variables",
          "type": "Object",
          "description": "JSON Object of the variables passed with the query",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "fetchPolicy",
          "type": "string",
          "description": "Set the fetchPolicy of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-fetchPolicy)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "pollInterval",
          "type": "number",
          "description": "Set the pollInterval.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-pollInterval)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "notifyOnNetworkStatusChange",
          "type": "boolean",
          "description": "Whether or not updates to the network status or network error should trigger re-rendering of your component.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-notifyOnNetworkStatusChange)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "requiredVariables",
          "type": "Object",
          "description": "It is used to halt the execution of the query when not all the variables are provided yet.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "defer",
          "type": "boolean",
          "description": "This allows you to defer the query until a later moment using Polymer.Async.idlePeriod. This solves an issue\nwith rendering critical data first an deferring non-critical information to a later moment.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 108,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hold",
          "type": "boolean",
          "description": "When this is set to `true` it will not execute the query when the properties query+variables+defer have a\nvalue. To run the query set hold to `false` or run execute()\n\nYou might want to set hostLoading to false when you do this.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "result",
          "type": "Object",
          "description": "Object of the resulting data of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/queries.html#default-result-props)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "hostLoading",
          "type": "?",
          "description": "Sets the default value of hostLoading to true, this means this element will always propagate that it is\nloading.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 8
            },
            "end": {
              "line": 135,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "clientName",
          "type": "?",
          "description": "Connect to a different client.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onRunQuery",
          "description": "Actual method to fetch all the data. This is called when on of the properties: query, variables, defer or hold is changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "defer"
            },
            {
              "name": "hold"
            }
          ]
        },
        {
          "name": "validate",
          "description": "Validate if all the required properties are properly filled in and return the error if there is something wrong.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "execute",
          "description": "Execute the query/mutation directly (used in combination with hold or with graphql-mutation)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "ObservableQuery"
          }
        },
        {
          "name": "_computeRequiredVariables",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query"
            }
          ]
        },
        {
          "name": "_updateQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getClient",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 4
            },
            "end": {
              "line": 288,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/graphql-query-simple.html",
          "description": "Simple Query"
        },
        {
          "url": "demo/graphql-query-defer.html",
          "description": "Complex Deferred Query"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 49,
          "column": 2
        },
        "end": {
          "line": 289,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GraphQLQuery",
      "attributes": [
        {
          "name": "variables",
          "description": "JSON Object of the variables passed with the query",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "fetch-policy",
          "description": "Set the fetchPolicy of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-fetchPolicy)",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "poll-interval",
          "description": "Set the pollInterval.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-pollInterval)",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "notify-on-network-status-change",
          "description": "Whether or not updates to the network status or network error should trigger re-rendering of your component.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-notifyOnNetworkStatusChange)",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "defer",
          "description": "This allows you to defer the query until a later moment using Polymer.Async.idlePeriod. This solves an issue\nwith rendering critical data first an deferring non-critical information to a later moment.",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 108,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hold",
          "description": "When this is set to `true` it will not execute the query when the properties query+variables+defer have a\nvalue. To run the query set hold to `false` or run execute()\n\nYou might want to set hostLoading to false when you do this.",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 8
            },
            "end": {
              "line": 118,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "result",
          "description": "Object of the resulting data of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/queries.html#default-result-props)",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "client-name",
          "description": "Connect to a different client.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "result-changed",
          "description": "Fired when the `result` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "graphql-query"
    },
    {
      "description": "_Note: the current implementation for mutations is in draft, api might change in a future release._\n\nThe current implementation stays as close to the `<graphql-query>` as possible.\n\n```\n<graphql-mutation id=\"contactMutation\" variables=\"[[contactFormData]]\" result=\"{{contactMutationResult}}\">\nmutation SubmitContactForm(\n  $name: String!,\n  $email: String!,\n  $phone: String!,\n  $subject: String!,\n  $message: String!\n) {\n  createContactForm(\n    name: $name,\n    email: $email,\n    phone: $phone,\n    subject: $subject,\n    message: $message\n  ) {\n    id\n  }\n}\n</graphql-mutation>\n```\n\n```js\n//somewhere after your button has called submit()\nthis.contactFormData = {} //fill the contactMutation with the correct data.\n\n//It will give an error if not everything is filled in correctly.\nthis.$.contactMutation.validate()\n\nthis.$.contactMutation.execute().then((result) => {\n  //AMAZING RESULT, Mutation has been submitted 🎉\n})\n```",
      "summary": "",
      "path": "graphql-mutation.html",
      "properties": [
        {
          "name": "query",
          "type": "Object",
          "description": "Copy of the query provided in this.innerText, if you want to programmatically change the query use\n`this.innerText`",
          "privacy": "private",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "variables",
          "type": "Object",
          "description": "JSON Object of the variables passed with the query",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "fetchPolicy",
          "type": "string",
          "description": "Set the fetchPolicy of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-fetchPolicy)",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "pollInterval",
          "type": "number",
          "description": "Set the pollInterval.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-pollInterval)",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "notifyOnNetworkStatusChange",
          "type": "boolean",
          "description": "Whether or not updates to the network status or network error should trigger re-rendering of your component.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-notifyOnNetworkStatusChange)",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "requiredVariables",
          "type": "Object",
          "description": "It is used to halt the execution of the query when not all the variables are provided yet.",
          "privacy": "private",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 97,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "defer",
          "type": "boolean",
          "description": "This allows you to defer the query until a later moment using Polymer.Async.idlePeriod. This solves an issue\nwith rendering critical data first an deferring non-critical information to a later moment.",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 108,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "hold",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "result",
          "type": "Object",
          "description": "Object of the resulting data of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/queries.html#default-result-props)",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "hostLoading",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 56,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "clientName",
          "type": "?",
          "description": "Connect to a different client.",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "GraphQLQuery"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 167,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "_onRunQuery",
          "description": "Actual method to fetch all the data. This is called when on of the properties: query, variables, defer or hold is changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 187,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "defer"
            },
            {
              "name": "hold"
            }
          ],
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "validate",
          "description": "Validate if all the required properties are properly filled in and return the error if there is something wrong.",
          "privacy": "public",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 193,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          },
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "execute",
          "description": "Execute the query/mutation directly (used in combination with hold or with graphql-mutation)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_computeRequiredVariables",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 275,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query"
            }
          ],
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "_updateQuery",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "_getClient",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 286,
              "column": 4
            },
            "end": {
              "line": 288,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "GraphQLQuery"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GraphQLMutation",
      "attributes": [
        {
          "name": "variables",
          "description": "JSON Object of the variables passed with the query",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 64,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "fetch-policy",
          "description": "Set the fetchPolicy of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-fetchPolicy)",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "poll-interval",
          "description": "Set the pollInterval.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-pollInterval)",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "notify-on-network-status-change",
          "description": "Whether or not updates to the network status or network error should trigger re-rendering of your component.\n[Apollo Client Docs](http://dev.apollodata.com/react/api-queries.html#graphql-config-options-notifyOnNetworkStatusChange)",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "defer",
          "description": "This allows you to defer the query until a later moment using Polymer.Async.idlePeriod. This solves an issue\nwith rendering critical data first an deferring non-critical information to a later moment.",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 105,
              "column": 8
            },
            "end": {
              "line": 108,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "hold",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 10
            },
            "end": {
              "line": 53,
              "column": 11
            }
          },
          "metadata": {}
        },
        {
          "name": "result",
          "description": "Object of the resulting data of the query.\n[Apollo Client Docs](http://dev.apollodata.com/react/queries.html#default-result-props)",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 126,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "client-name",
          "description": "Connect to a different client.",
          "sourceRange": {
            "file": "graphql-query.html",
            "start": {
              "line": 140,
              "column": 8
            },
            "end": {
              "line": 142,
              "column": 9
            }
          },
          "metadata": {},
          "inheritedFrom": "GraphQLQuery"
        },
        {
          "name": "host-loading",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 56,
              "column": 11
            }
          },
          "metadata": {}
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "result-changed",
          "description": "Fired when the `result` property changes.",
          "metadata": {},
          "inheritedFrom": "GraphQLQuery"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "graphql-mutation"
    }
  ]
}
